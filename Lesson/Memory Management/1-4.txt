Quản lý bộ nhớ:


Hiểu bộ nhớ là một khía cạnh quan trọng của lập trình C. Khi bạn khai báo một biến bằng kiểu dữ liệu cơ bản, C sẽ tự động cấp phát không gian cho biến trong một vùng bộ nhớ được gọi là ngăn xếp (stack) . 

Ví dụ, một biến int thường được cấp phát 4 byte khi được khai báo. Chúng tôi biết điều này bằng cách sử dụng toán tử sizeof :

int x;
printf("%d", sizeof(x)); /* output: 4 */

Một ví dụ khác, một mảng có kích thước được chỉ định được cấp phát các khối bộ nhớ liền kề (contiguous blocks of memory) với mỗi khối có kích thước cho một phần tử:

int arr[10];
printf("%d", sizeof(arr)); /* output: 40 */

Miễn là chương trình của bạn khai báo rõ ràng kiểu dữ liệu cơ bản hoặc kích thước mảng, bộ nhớ sẽ tự động được quản lý. Tuy nhiên, bạn có thể đã muốn thực hiện một chương trình mà kích thước mảng không được quyết định cho đến thời gian chạy. 

Cấp phát bộ nhớ động là quá trình cấp phát và giải phóng bộ nhớ khi cần thiết. Bây giờ bạn có thể nhắc số phần tử mảng trong thời gian chạy và sau đó tạo một mảng với nhiều phần tử đó. Bộ nhớ động được quản lý với các con trỏ trỏ đến các khối bộ nhớ mới được cấp phát trong một vùng được gọi là heap .



Ngoài việc quản lý bộ nhớ tự động bằng cách sử dụng ngăn xếp và cấp phát bộ nhớ động bằng cách sử dụng heap, còn có dữ liệu được quản lý tĩnh trong bộ nhớ chính cho các biến tồn tại trong suốt thời gian của chương trình.

->Dynamic memory allocation is: the process of allocating and freeing memory as needed.



Memory Management Functions


thư viện stdlib.h bao gồm các chức năng quản lý bộ nhớ.

The statement #include <stdlib.h> at the top of your program gives you access to the following:

malloc(bytes) Returns a pointer to a contiguous block of memory that is of size bytes.

calloc(num_items, item_size) Returns a pointer to a contiguous block of memory that has num_items items, each of size item_size bytes. Typically used for arrays, structures, and other derived data types. The allocated memory is initialized to 0.

realloc(ptr, bytes) Resizes the memory pointed to by ptr to size bytes. The newly allocated memory is not initialized.

free(ptr) Releases the block of memory pointed to by ptr.

->#include <stdlib.h>

