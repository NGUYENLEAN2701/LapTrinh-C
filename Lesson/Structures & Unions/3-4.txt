
sử dụng union giống như struct nhưng đây là phương pháp tối ưu bộ nhớ:

#include <stdio.h>

union val {
    int int_num;
    float fl_num;
    char str[20]; 
};

int main() {
    union val test;
    test.int_num = 42;
    printf("%d", test.int_num);
    return 0;
}


->union val {

  int int_num;

  float fl_num;

  char str[20]; 

};


chú ý khi dùng union biến sẽ chỉ hiển thị dữ liệu cập nhật cuối cùng

ví dụ:

#include <stdio.h>
#include <string.h>
union val
{
    int int_num;
    float fl_num;
    char str[20];
};
int main()
{
    union val test;
    strcpy(test.str, "hello");
    test.fl_num = 98.76;
    test.int_num = 88;//------->đây là lần cập nhật cuối cùng
    printf("%d\n", test.int_num);//------->chỉ có kết quả này là chính xác
    printf("%.2f\n", test.fl_num);
    printf("%s\n", test.str);
    return 0;
}


->
union val {

  int int_num;

  float fl_num; 

};
union val test;

test.int_num = 123;

test.fl_num = 98.76;


tóm lại union chỉ cho phép sử dụng 1 trong các loại kiểu dữ liệu có mặt... 

Structures With Unions

ví dụ:

#include <stdio.h>
#include <string.h>

typedef struct {
  char make[20];
  int model_year;
  int id_type; /* 0 for id_num, 1 for VIN */
  union {
    int id_num;//-------> chỉ sử dụng id_num hoặc VIN ko dùng được cả hai
    char VIN[20]; 
  } id;
} vehicle;

int main() {  
  vehicle car1;
  strcpy(car1.make, "Ford");
  car1.model_year = 2017;
  car1.id_type = 0;
  car1.id.id_num = 123098;
  
  printf("Car %s, %d", car1.make, car1.model_year);

  return 0;
}


để cập nhật kết quả thì dùng dấu '.'

->struct person {

    int age;

    char name[40];

    union {

        int id_num;

        char text[20]; 

    } passport;
};