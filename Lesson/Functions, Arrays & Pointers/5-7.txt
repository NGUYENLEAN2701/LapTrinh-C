Pointer : Con Trỏ

Sử dụng bộ nhớ:
C được thiết kế để trở thành một ngôn ngữ cấp thấp có thể dễ dàng truy cập các vị trí bộ nhớ và thực hiện các hoạt động liên quan đến bộ nhớ.
Ví dụ, 
hàm scanf () đặt giá trị được nhập bởi người dùng tại vị trí hoặc địa chỉ của biến. 
Điều này được thực hiện bằng cách sử dụng ký hiệu &.

& num là địa chỉ của biến num .

Địa chỉ bộ nhớ được cung cấp dưới dạng số thập lục phân . Thập lục phân hoặc hex , là một hệ thống số cơ sở-16 mà sử dụng chữ số từ 0 đến 9 và các chữ cái từ A đến F (16 ký tự) để đại diện cho một nhóm bốn chữ số nhị phân có thể có một giá trị từ 0 đến 15.
Nó là dễ dàng hơn để đọc một số hex dài 8 ký tự cho 32 bit bộ nhớ hơn là để cố gắng giải mã 32 số 1 và số 0 trong hệ nhị phân.
Chương trình sau đây hiển thị địa chỉ bộ nhớ cho các biến i và k :

#include <stdio.h>
void test(int k);

int main() {
  int i = 0;
    
  printf("The address of i is %x\n", &i);
  test(i);
  printf("The address of i is %x\n", &i);
  test(i);

  return 0;
}

void test(int k) {
  printf("The address of k is %x\n", &k);
}
//%x để hiển thị hex


->
int var = 42;
printf("%x", &var)



Con trỏ là gì?

Con trỏ rất quan trọng trong lập trình C vì chúng cho phép bạn dễ dàng làm việc với các vị trí bộ nhớ.
Chúng là nền tảng cho mảng, chuỗi cũng như các cấu trúc dữ liệu và thuật toán khác.
Con trỏ là một biến chứa địa chỉ của một biến khác. Nói cách khác, nó "trỏ" đến vị trí được gán cho một biến và có thể gián tiếp truy cập vào biến đó.
Con trỏ được khai báo bằng ký hiệu * và có dạng:

pointer_type *identifier 



pointer_type là kiểu dữ liệu mà con trỏ sẽ trỏ tới. Kiểu dữ liệu con trỏ thực tế là một số thập lục phân, nhưng khi khai báo một con trỏ , bạn phải chỉ ra kiểu dữ liệu mà nó sẽ trỏ tới.
Dấu hoa thị * khai báo một con trỏ và sẽ xuất hiện bên cạnh số nhận dạng được sử dụng cho biến con trỏ .
Chương trình sau giải thích các biến, con trỏ và địa chỉ:

int j = 63;
int *p = NULL;
p = &j; 

printf("The address of j is %x\n", &j);
printf("p contains address %x\n", p);
printf("The value of j is %d\n", j);
printf("p is pointing to the value %d\n", *p); 

Có một số điều cần lưu ý về chương trình này:
• Các con trỏ phải được khởi tạo thành NULL cho đến khi chúng được gán một vị trí hợp lệ
• Các con trỏ có thể được gán địa chỉ của một biến bằng cách sử dụng dấu và & 
• Để xem con trỏ đang trỏ tới cái gì , hãy sử dụng lại dấu *, như trong * p 
Trong trường hợp này, * được gọi là toán tử hướng dẫn hoặc tham chiếu . Quá trình này được gọi là dereferencing

Một số thuật toán sử dụng một con trỏ tới một con trỏ . Kiểu khai báo biến này sử dụng ** và có thể được gán địa chỉ của một con trỏ khác , như trong:
int x = 12;
int *p = NULL;
int ** ptr = NULL;
p = & x;
ptr = & p;

->int var = 42;
int *ptr = &var;




Con trỏ trong Biểu thức

Con trỏ có thể được sử dụng trong các biểu thức giống như bất kỳ biến nào. Các toán tử số học có thể được áp dụng cho bất cứ thứ gì mà con trỏ trỏ tới.
Ví dụ:

int x = 5;
int y;
int *p = NULL;
p = &x;

y = *p + 2; /* y is assigned 7 */
y += *p;     /* y is assigned 12 */
*p = y;       /* x is assigned 12 */
(*p)++;      /* x is incremented to 13 */

printf("p is pointing to the value %d\n", *p); 

->Pointers can be used in expressions just as any variable.

