hàm main() là hàm chính

khai báo hàm:

return_type function_name (tham số); 


ví dụ:

int MaxNum(int a[]){
    int Max;
    //code

    return Max;
}

->true


#include <stdio.h>

/* declaration */
int square (int num); 

int main() {
  int x, result;
  
  x = 5;
  result = square(x);
  printf("%d squared is %d\n", x, result);
    
  return 0;
}

/* definition */
int square (int num) {
  int y;

  y = num * num;

  return(y);
} 

->int triple (int num) {
  int y;
  y = num * 3;
  return y;
}





truyền nhiều tham số


#include <stdio.h>

int sum_up (int x, int y); 

int main() {
  int x, y, result;
  
  x = 3;
  y = 12;
  result = sum_up(x, y);
  printf("%d + %d = %d", x, y, result);
    
  return 0;
}

int sum_up (int x, int y) { 
  x += y;
  return(x);
} 


->void test(float a, float b);


biến toàn cục

#include <stdio.h>

int global1 = 0; 

int main() {    
  int local1, local2;
  
  local1 = 5;
  local2 = 10;
  global1 = local1 + local2;
  printf("%d \n", global1);  /* 15 */
    
  return 0;
} 

->The visibility of variables within a program.



Static Variables:

Biến static có phạm vi cục bộ nhưng không bị hủy khi một hàm được thoát. 
Do đó, một biến static vẫn giữ nguyên giá trị của nó trong suốt thời gian tồn tại của chương trình và có thể được truy cập mỗi khi hàm được nhập lại.
Một biến static được khởi tạo khi được khai báo và yêu cầu tiền tố static .
Chương trình sau sử dụng một biến tĩnh:



#include <stdio.h>

void say_hello();

int main() {    
  int i;

  for (i = 0; i < 5; i++) {
    say_hello();
  }
   
  return 0;
}

void say_hello() {
  static int num_calls = 1;

  printf("Hello number %d\n", num_calls);
  num_calls++;

} 


-> static int var = 1;