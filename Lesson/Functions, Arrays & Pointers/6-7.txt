Con trỏ tiếp theo:

Con trỏ đặc biệt hữu ích với mảng. Một khai báo mảng dự trữ một khối địa chỉ bộ nhớ liền kề cho các phần tử của nó. Với con trỏ, chúng ta có thể trỏ đến phần tử đầu tiên và sau đó sử dụng số học địa chỉ để duyệt qua mảng :
+ được sử dụng để di chuyển tới một vị trí bộ nhớ
- được sử dụng để di chuyển ngược lại một vị trí bộ nhớ


int a[5] = {22, 33, 44, 55, 66};
int *ptr = NULL;
int i;

ptr = a; //! <=> ptr =&a[0]
for (i = 0; i < 5; i++)
{

    printf("% d", *(ptr));
    ptr++;
}

->44


Các thao tác khác với địa chỉ:

Số học địa chỉ cũng có thể được coi là số học con trỏ vì các phép toán liên quan đến con trỏ.
Bên cạnh việc sử dụng + và - để tham chiếu đến các vị trí bộ nhớ tiếp theo và trước đó, bạn có thể sử dụng các toán tử gán để thay đổi địa chỉ mà con trỏ chứa.

int a[5] = {22, 33, 44, 55, 66};
int *ptr = NULL;

ptr = a;  /* point to the first array element */
printf("%d  %x\n", *ptr, ptr);  /* 22 */
ptr++;
printf("%d  %x\n", *ptr, ptr);  /* 33 */
ptr += 3;
printf("%d  %x\n", *ptr, ptr);  /* 66 */
ptr--;
printf("%d  %x\n", *ptr, ptr);  /* 55 */
ptr -= 2;
printf("%d  %x\n", *ptr, ptr);  /* 33 */ 

->int arr[] = {1, 2, 3};
int* ptr = arr;
ptr++;
printf("%d", *ptr);


Con trỏ và Hàm:

Con trỏ mở rộng đáng kể khả năng cho các chức năng. Chúng tôi không còn bị giới hạn trong việc trả về một giá trị. Với các tham số con trỏ , các hàm của bạn có thể thay đổi dữ liệu thực tế chứ không phải là một bản sao dữ liệu.
Để thay đổi giá trị thực của các biến, câu lệnh gọi chuyển địa chỉ tới các tham số con trỏ trong một hàm.
Ví dụ, chương trình sau hoán đổi hai giá trị:


void swap (int *num1, int *num2);

int main() {
  int x = 25;
  int y = 100;

  printf("x is %d, y is %d\n", x, y); 
  swap(&x, &y);
  printf("x is %d, y is %d\n", x, y); 

  return 0;
}
 
void swap (int *num1, int *num2) {
  int temp;

  temp = *num1;
  *num1 = *num2;
  *num2 = temp;
}


->#include <stdio.h>

void test(int * x) {
  *x += *x/2;
} 

int main() {
  int v = 8;
  test(&v);
  printf("%d", v);//12
}


